{"version":3,"sources":["App.js","index.js"],"names":["App","input","setInput","useState","iodp","setIodp","bitString","setBitString","hexString","setHexString","receivedPRNs","setReceivedPRNs","error","setError","messageType","setMessageType","_jsxs","_Fragment","children","_jsx","className","map","num","value","onClick","onSubmit","async","event","preventDefault","res","fetch","method","headers","body","JSON","stringify","numbers","ok","errorData","json","Error","message","data","console","log","bit_string","hex_string","received_PRNs","type","onChange","target","placeholder","length","prn","index","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"+KA4IeA,MA1If,WACI,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAMC,GAAWF,mBAAS,KAC1BG,EAAWC,GAAgBJ,mBAAS,KACpCK,EAAWC,GAAgBN,mBAAS,KACpCO,EAAcC,GAAmBR,mBAAS,KAC1CS,EAAOC,GAAYV,mBAAS,KAC5BW,EAAaC,GAAkBZ,mBAAS,GAkD/C,OACIa,eAAAC,WAAA,CAAAC,SAAA,CACIC,cAAA,OAAKC,UAAU,uEAAsEF,SACjFC,cAAA,OAAKC,UAAU,2BAA0BF,SACrCC,cAAA,OAAKC,UAAU,yBAAwBF,SArDvC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAsD5CG,IAAKC,GACVH,cAAA,UACAI,MAAOT,EAEPM,UAAU,kBACVI,QAASA,IAAMT,EAAeO,GAAKJ,SAElCI,GAJIA,UAUrBH,cAAA,OAAKC,UAAU,wEAAuEF,SAClFF,eAAA,OAAKI,UAAU,0BAAyBF,SAAA,CACpCC,cAAA,MAAIC,UAAU,mBAAkBF,SAAC,iBACjCF,eAAA,QAAMS,SA1DDC,UACjBC,EAAMC,iBACN,IACI,MAAMC,QAAYC,MAAM,eAAgB,CACpCC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEC,QAASnC,MAGpC,IAAK4B,EAAIQ,GAAI,CAET,MAAMC,QAAkBT,EAAIU,OAC5B,MAAM,IAAIC,MAAMF,EAAUG,SAAW,uBACzC,CAEA,MAAMC,QAAab,EAAIU,OAGvBI,QAAQC,IAAIF,GAGZnC,EAAamC,EAAKG,YAClBpC,EAAaiC,EAAKI,YAClBnC,EAAgB+B,EAAKK,eAGrBlC,EAAS,GACb,CACA,MAAOD,GACH+B,QAAQ/B,MAAM,SAAUA,GACxBC,EAAS,UAAYD,EAAM6B,QAC/B,GAyByCvB,SAAA,CACzBF,eAAA,OAAKI,UAAU,OAAMF,SAAA,CACjBC,cAAA,SACI6B,KAAK,OACLzB,MAAOtB,EACPgD,SAvEDtB,IACvBzB,EAASyB,EAAMuB,OAAO3B,QAuEEH,UAAU,eACV+B,YAAY,8CAEhBhC,cAAA,SACI6B,KAAK,OACLzB,MAAOnB,EACP6C,SA1EFtB,IACtBtB,EAAQsB,EAAMuB,OAAO3B,QA0EGH,UAAU,eACV+B,YAAY,iDAGpBhC,cAAA,UAAQ6B,KAAK,SAAS5B,UAAU,wBAAuBF,SAAC,cAI3DN,EAAQO,cAAA,KAAGC,UAAU,mBAAkBF,SAAEN,IAEtCI,eAAAC,WAAA,CAAAC,SAAA,CACCZ,GACGU,eAAA,OAAKI,UAAU,OAAMF,SAAA,CACjBC,cAAA,MAAIC,UAAU,cAAaF,SAAC,eAC5BC,cAAA,OAAKC,UAAU,wBAAuBF,SAClCC,cAAA,KAAGC,UAAU,aAAYF,SAAEZ,SAItCE,GACGQ,eAAA,OAAKI,UAAU,OAAMF,SAAA,CACjBC,cAAA,MAAIC,UAAU,cAAaF,SAAC,eAC5BC,cAAA,OAAKC,UAAU,wBAAuBF,SAClCC,cAAA,KAAGC,UAAU,aAAYF,SAAEV,SAItCE,EAAa0C,OAAS,GACnBpC,eAAA,OAAKI,UAAU,OAAMF,SAAA,CACjBC,cAAA,MAAIC,UAAU,cAAaF,SAAC,kBAC5BC,cAAA,MAAIC,UAAU,aAAYF,SACrBR,EAAaW,IAAI,CAACgC,EAAKC,IACpBnC,cAAA,MAAgBC,UAAU,kBAAiBF,SACtCmC,GADIC,mBAajD,E,KCrIAC,IAASC,OACPrC,cAACsC,IAAMC,WAAU,CAAAxC,SACfC,cAACnB,EAAG,MAEN2D,SAASC,eAAe,Q","file":"static/js/main.41d1dbd3.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction App() {\r\n    const [input, setInput] = useState('');\r\n    const [iodp, setIodp] = useState('');\r\n    const [bitString, setBitString] = useState('');\r\n    const [hexString, setHexString] = useState('');\r\n    const [receivedPRNs, setReceivedPRNs] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [messageType, setMessageType] = useState(1);\r\n    const buttons = [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 17, 18, 24, 25, 26, 27, 28];\r\n\r\n\r\n\r\n    const handleInputChange = (event) => {\r\n        setInput(event.target.value);\r\n    };\r\n\r\n    const handleIodpChange = (event) => {\r\n        setIodp(event.target.value);\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const res = await fetch('/api/numbers', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ numbers: input }),\r\n            });\r\n\r\n            if (!res.ok) {\r\n                // Extract the error response from the body and throw it\r\n                const errorData = await res.json();\r\n                throw new Error(errorData.message || 'Something went wrong');\r\n            }\r\n\r\n            const data = await res.json();\r\n\r\n            // Log the full response data to the console\r\n            console.log(data);\r\n\r\n            // Set the individual pieces of the response to display them\r\n            setBitString(data.bit_string);\r\n            setHexString(data.hex_string);\r\n            setReceivedPRNs(data.received_PRNs);\r\n\r\n            // Clear any existing error\r\n            setError('');\r\n        } \r\n        catch (error) {\r\n            console.error('Error:', error);\r\n            setError('Error: ' + error.message);\r\n        }\r\n    };\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <div className=\"container d-flex justify-content-center align-items-center min-vh-40\">\r\n                <div className=\"card p-4 shadow-lg w-100\">\r\n                    <div className=\"d-flex flex-wrap gap-2\">\r\n                        {buttons.map((num) => (\r\n                            <button\r\n                            value={messageType}\r\n                            key={num}\r\n                            className=\"btn btn-primary\"\r\n                            onClick={() => setMessageType(num)}\r\n                            >\r\n                            {num}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container d-flex justify-content-center align-items-center min-vh-100\">\r\n                <div className=\"card p-4 shadow-lg w-50\">\r\n                    <h1 className=\"text-center mb-4\">Number Input</h1>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"mb-3\">\r\n                            <input\r\n                                type=\"text\"\r\n                                value={input}\r\n                                onChange={handleInputChange}\r\n                                className=\"form-control\"\r\n                                placeholder=\"Enter numbers (1-210) separated by commas\"\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                value={iodp}\r\n                                onChange={handleIodpChange}\r\n                                className=\"form-control\"\r\n                                placeholder=\"Enter numbers (1-210) separated by commas\"\r\n                            />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-primary w-100\">Submit</button>\r\n                    </form>\r\n\r\n                    {/* Display Error */}\r\n                    {error ? <p className=\"mt-4 text-danger\">{error}</p> : \r\n\r\n                        <>\r\n                        {bitString && (\r\n                            <div className=\"mt-6\">\r\n                                <h4 className=\"text-center\">Bit String</h4>\r\n                                <div className=\"alert alert-secondary\">\r\n                                    <p className=\"text-break\">{bitString}</p>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                        {hexString && (\r\n                            <div className=\"mt-6\">\r\n                                <h4 className=\"text-center\">Hex String</h4>\r\n                                <div className=\"alert alert-secondary\">\r\n                                    <p className=\"text-break\">{hexString}</p>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                        {receivedPRNs.length > 0 && (\r\n                            <div className=\"mt-6\">\r\n                                <h4 className=\"text-center\">Received PRNs</h4>\r\n                                <ul className=\"list-group\">\r\n                                    {receivedPRNs.map((prn, index) => (\r\n                                        <li key={index} className=\"list-group-item\">\r\n                                            {prn}\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        )}\r\n                        </>\r\n                    }   \r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}